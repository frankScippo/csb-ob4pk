{"version":3,"sources":["sound/duck_sound.wav","image/bj.jpg","App.js","serviceWorker.js","index.js"],"names":["customStyles","content","top","left","right","bottom","marginRight","transform","maxWidth","borderRadius","Paperella","sound","Audio","duck_sound","className","onClick","play","timer","setTimeout","window","open","clearTimeout","playSound","Info","useState","modalIsOpen","setIsOpen","isOpen","onRequestClose","style","contentLabel","App","backgroundImage","bg","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wMAAe,G,MAAA,IAA0B,wCCA1B,MAA0B,+B,OCQnCA,EAAe,CACnBC,QAAS,CACPC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,wBACXC,SAAU,IACVC,aAAc,KAIlB,SAASC,IACP,IAAIC,EAAQ,IAAIC,MAAMC,GAUtB,OACE,qBAAKC,UAAU,YAAf,SACE,mBAAGC,QAAS,kBAXhB,WACEJ,EAAMK,OACN,IAAMC,EAAQC,YAAW,WACvBC,OAAOC,KACL,+EAEFC,aAAaJ,KACZ,KAIiBK,IAAaR,UAAU,gBAAzC,8CAON,SAASS,IACP,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAoBC,EAApB,KASA,OACE,sBAAKZ,UAAU,eAAf,UACE,wBAAQA,UAAU,OAAOC,QAT7B,WACEW,GAAU,IAQR,SACID,EAAoB,IAAN,MAElB,eAAC,IAAD,CACEE,OAAQF,EACRG,eAVN,WACEF,GAAU,IAUNG,MAAO7B,EACP8B,aAAa,OAJf,UAME,iDAEA,2GAEE,uBAFF,oFAKE,uBALF,8QAUE,uBAVF,gGAaE,uBAbF,8EAoBO,SAASC,IACtB,OACE,sBAAKF,MAAO,CAAEG,gBAAiB,OAASC,EAAK,KAAOnB,UAAU,MAA9D,UACE,cAACJ,EAAD,IACA,cAACa,EAAD,IACA,qBAAKT,UAAU,YAAf,0CC7EN,IAAMoB,EAAcC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC3FjE,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAChC,EAAD,MAEF4B,GDYK,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,0CAAwB9C,OAAOiB,SAAS8B,MACpDC,SAAWhD,OAAOiB,SAAS+B,OAIvC,OAGFhD,OAAOiD,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,0CAAN,sBAEP/B,IAgEV,SAAiCM,EAAOC,GAEtC4B,MAAM7B,GACHK,MAAK,SAACyB,GAEL,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAACC,GAClCA,EAAa+B,aAAahC,MAAK,WAC7B1B,OAAOiB,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCrC/BE,K","file":"static/js/main.de8c6cff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/duck_sound.e6a1b2d8.wav\";","export default __webpack_public_path__ + \"static/media/bj.67020c7a.jpg\";","import { useState } from \"react\";\nimport Modal from \"react-modal\";\n\nimport \"./styles.css\";\n\nimport duck_sound from \"./sound/duck_sound.wav\";\nimport bg from \"./image/bj.jpg\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    maxWidth: 300,\n    borderRadius: 15\n  }\n};\n\nfunction Paperella() {\n  let sound = new Audio(duck_sound);\n  function playSound() {\n    sound.play();\n    const timer = setTimeout(() => {\n      window.open(\n        \"https://www.eventbrite.it/e/biglietti-falling-stars-pool-party-166376539709\"\n      );\n      clearTimeout(timer);\n    }, 500);\n  }\n  return (\n    <div className=\"Paperella\">\n      <a onClick={() => playSound()} className=\"PaperellaLink\">\n        FAI CLICK QUI PER UN BIGLIETTO\n      </a>\n    </div>\n  );\n}\n\nfunction Info() {\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n  return (\n    <div className=\"InfoPosition\">\n      <button className=\"Info\" onClick={openModal}>\n        {!modalIsOpen ? \"?\" : \"X\"}\n      </button>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        style={customStyles}\n        contentLabel=\"Info\"\n      >\n        <h2>PAPERELLAPARTY?</h2>\n\n        <div>\n          Prenota gratuitamente e assicurati l'accesso al Pool Party! ü•≥\n          <br />\n          Purtroppo in questo periodo i posti sono limitati, quindi affrettati\n          üò±\n          <br />\n          Ricordate di inserire la vera mail durante la fase di registrazione,\n          non preoccupatevi di fare un account, vi servir√† per le prossime\n          volte. Vi consigliamo di scaricare Eventbrite dagli Store per avere il\n          biglietto sempre a portata di App! ü§ôüèΩ\n          <br />\n          Location all'aperto sotto il cielo stellato, ampi spazi per mantenere\n          la \"distanza sociale\",\n          <br />√® un'occasione per passare una serata alternativa. üí´\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <div style={{ backgroundImage: \"url(\" + bg + \")\" }} className=\"App\">\n      <Paperella />\n      <Info />\n      <div className=\"Copyright\">powered by PAPERELLAPARTY</div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}